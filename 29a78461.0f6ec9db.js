(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{146:function(e,n,t){"use strict";t.d(n,"a",(function(){return m})),t.d(n,"b",(function(){return d}));var r=t(0),o=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=o.a.createContext({}),p=function(e){var n=o.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},m=function(e){var n=p(e.components);return o.a.createElement(s.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},u=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(t),u=r,d=m["".concat(i,".").concat(u)]||m[u]||b[u]||a;return t?o.a.createElement(d,c(c({ref:n},s),{},{components:t})):o.a.createElement(d,c({ref:n},s))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=u;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var s=2;s<a;s++)i[s]=t[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},68:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return p}));var r=t(2),o=t(6),a=(t(0),t(146)),i={id:"example-config",title:"Example Config"},c={unversionedId:"toolchain/example-config",id:"toolchain/example-config",isDocsHomePage:!1,title:"Example Config",description:"This example config syncs from figma to Style Dictionary to run its",source:"@site/../docs/toolchain/example-config.md",permalink:"/theemo/docs/toolchain/example-config",sidebar:"toolchain",previous:{title:"Glossary",permalink:"/theemo/docs/toolchain/glossary"},next:{title:"Overview",permalink:"/theemo/docs/api/theemo"}},l=[{value:"Theemo: <code>theemo.js</code>",id:"theemo-theemojs",children:[]},{value:"Style Dictionary: <code>config.js</code>",id:"style-dictionary-configjs",children:[]}],s={rightToc:l};function p(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"This example config ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"/theemo/docs/toolchain/sync"}),"syncs")," from figma to Style Dictionary to run its\n",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"/theemo/docs/toolchain/build"}),"build")," and ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"/theemo/docs/toolchain/generate"}),"generates")," a theme css file. To understand\nthe environment better, here are the constraints of the domain:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Tokens in figma are in the format of ",Object(a.b)("inlineCode",{parentName:"li"},"{section}/{name}")," - where each ",Object(a.b)("inlineCode",{parentName:"li"},"section"),"\nand ",Object(a.b)("inlineCode",{parentName:"li"},"name")," should have a ",Object(a.b)("inlineCode",{parentName:"li"},".")," in their name."),Object(a.b)("li",{parentName:"ul"},"Tokens that ",Object(a.b)("em",{parentName:"li"},"begins")," with a ",Object(a.b)("inlineCode",{parentName:"li"},".")," are ",Object(a.b)("a",Object(r.a)({parentName:"li"},{href:"/theemo/docs/toolchain/glossary#token-type"}),Object(a.b)("em",{parentName:"a"},"basic"))," tokens\n(like a hidden folder in unix)."),Object(a.b)("li",{parentName:"ul"},"Tokens can have a ",Object(a.b)("inlineCode",{parentName:"li"},"$light")," or ",Object(a.b)("inlineCode",{parentName:"li"},"$dark")," suffix to denote their color scheme"),Object(a.b)("li",{parentName:"ul"},"We only want ",Object(a.b)("a",Object(r.a)({parentName:"li"},{href:"/theemo/docs/toolchain/glossary#token-type"}),Object(a.b)("em",{parentName:"a"},"purpose"))," tokens in Style Dictionary\nbut need ",Object(a.b)("em",{parentName:"li"},"basic")," tokens for reference"),Object(a.b)("li",{parentName:"ul"},"References are handled using ",Object(a.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.figma.com/community/plugin/791262205400516364/Style-References"}),"Style\nReferences"),"\nFigma plugin."),Object(a.b)("li",{parentName:"ul"},"Tokens are grouped by color scheme: ",Object(a.b)("inlineCode",{parentName:"li"},"light"),", ",Object(a.b)("inlineCode",{parentName:"li"},"dark")," or ",Object(a.b)("inlineCode",{parentName:"li"},"base")," (no color\nscheme)"),Object(a.b)("li",{parentName:"ul"},"Tokens are written to ",Object(a.b)("inlineCode",{parentName:"li"},"properties/{colorScheme}/*")," on disk"),Object(a.b)("li",{parentName:"ul"},"The output of the Style Dictionary build is ",Object(a.b)("inlineCode",{parentName:"li"},"build/base.css"),",\n",Object(a.b)("inlineCode",{parentName:"li"},"build/light.css")," and ",Object(a.b)("inlineCode",{parentName:"li"},"build/dark.css")),Object(a.b)("li",{parentName:"ul"},"The generated CSS theme file is at ",Object(a.b)("inlineCode",{parentName:"li"},"dist/{themeName}.css"))),Object(a.b)("p",null,"There is a ",Object(a.b)("inlineCode",{parentName:"p"},".env")," file containing four non-public parameters:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-text"}),"FIGMA_FILE=...\nFIGMA_SECRET=...\nJSONBIM_FILE=...\nJSONBIN_SECRET=...\n")),Object(a.b)("h2",{id:"theemo-theemojs"},"Theemo: ",Object(a.b)("inlineCode",{parentName:"h2"},"theemo.js")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"module.exports = {\n  sync: {\n    reader: {\n      source: 'figma',\n      figmaFile: process.env.FIGMA_FILE,\n      figmaSecret: process.env.FIGMA_SECRET,\n\n      // referencer\n      referencer: {\n        type: 'figma-plugin',\n        plugin: 'style-referencer',\n        pluginOptions: {\n          jsonbinFile: process.env.JSONBIN_FILE,\n          jsonbinSecret: process.env.JSONBIN_SECRET\n        }\n      },\n\n      // parser\n      isTokenByStyle(style) {\n        return style.name.includes('.') && style.name.includes('/');\n      }\n    },\n  \n    // lexer\n    lexer: {\n      // /**\n      //  * Default normalization strips white space from your token and reference name\n      //  */\n      // normalizeToken(token: Token): Token {\n      //   const normalized = { ...token };\n\n      //   normalized.name = normalized.name.replace(/\\s/g, '');\n      //   if (normalized.reference) {\n      //     normalized.reference = normalized.reference.replace(/\\s/g, '');\n      //   }\n\n      //   return normalized;\n      // },\n\n      /**\n       * Describe your tokens:\n       *\n       * - What's the type?\n       * - What's the color scheme?\n       */\n      classifyToken(token) {\n        const t = {...token};\n        t.type = t.name.startsWith('.') ? 'basic' : 'purpose';\n\n        const contextIndex = t.name.indexOf('.$');\n        if (contextIndex !== -1) {\n          t.colorScheme = t.name.slice(contextIndex + 2);\n          t.name = t.name.slice(0, contextIndex);\n        }\n\n        return t;\n      },\n\n      /**\n       * Here we filter tokens to only keep the purpose tokens\n       */\n      filterToken(token) {\n        return token.type === 'purpose';\n      },\n\n      /**\n       * And finally we group them by color scheme\n       * You will receive a token and return the group for it\n       */\n      groupForToken(token) {\n        return token.colorScheme ? token.colorScheme : 'base';\n      }\n    },\n\n    // writer\n    writer: {\n      formats: {\n        color: 'hex',\n        colorAlpha: 'rgb',\n      },\n\n      /**\n       * The file in this case is the part before the first `/` in the token name.\n       */\n      fileForToken(token) {\n        const slashIndex = token.name.indexOf('/')\n        return token.name.slice(0, slashIndex).replace(/\\./g, '/');\n      },\n\n      /**\n       * The property path for a token is the part after the first `/`\n       * with the category as prefix and a color scheme as suffix.\n       */\n      pathForToken(token) {\n        const slashIndex = token.name.indexOf('/')\n        let name = token.name.slice(slashIndex + 1);\n\n        if (token.category) {\n          name = `${token.category}.${name}`;\n        }\n\n        const path = name.split('.');\n\n        if (token.colorScheme) {\n          path.push(`.$${token.colorScheme}`);\n        }\n\n        return path;\n      }\n    }\n  },\n\n  generate: {\n    input: 'build',\n    output: 'dist',\n    auto: true,\n    defaultColorScheme: 'light',\n    colorSchemes: {\n      light: {\n        auto: true,\n        manual: true\n      },\n      dark: {\n        auto: true,\n        manual: true\n      }\n    }\n  }\n}\n")),Object(a.b)("h2",{id:"style-dictionary-configjs"},"Style Dictionary: ",Object(a.b)("inlineCode",{parentName:"h2"},"config.js")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"module.exports = {\n  source: ['properties/**/*.json'],\n  platforms: {\n    web: {\n      transformGroup: 'theemo/css',\n      buildPath: 'build/',\n      files: [\n        {\n          format: 'css/variables',\n          destination: 'base.css',\n          options: {\n            showFileHeader: false\n          },\n          filter(token) {\n            return !token.colorScheme;\n          }\n        },\n        {\n          format: 'css/variables',\n          destination: 'light.css',\n          options: {\n            showFileHeader: false\n          },\n          filter(token) {\n            return token.colorScheme === 'light';\n          }\n        },\n        {\n          format: 'css/variables',\n          destination: 'dark.css',\n          options: {\n            showFileHeader: false\n          },\n          filter(token) {\n            return token.colorScheme === 'dark';\n          }\n        }\n      ]\n    }\n  },\n  transforms: {\n    name: {\n      matcher(property) {\n        return property.name.includes('.$');\n      },\n      transformer(property) {\n        property.path.pop();\n\n        const index = property.name.indexOf('.$')\n        return property.name.slice(0, index);\n      }\n    }\n  }\n}\n")))}p.isMDXComponent=!0}}]);